/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dotenv";
exports.ids = ["vendor-chunks/dotenv"];
exports.modules = {

/***/ "(ssr)/./node_modules/dotenv/config.js":
/*!***************************************!*\
  !*** ./node_modules/dotenv/config.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("(function() {\n    (__webpack_require__(/*! ./lib/main */ \"(ssr)/./node_modules/dotenv/lib/main.js\").config)(Object.assign({}, __webpack_require__(/*! ./lib/env-options */ \"(ssr)/./node_modules/dotenv/lib/env-options.js\"), __webpack_require__(/*! ./lib/cli-options */ \"(ssr)/./node_modules/dotenv/lib/cli-options.js\")(process.argv)));\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG90ZW52L2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQztJQUNDQSx5RkFBNEIsQ0FDMUJFLE9BQU9DLE1BQU0sQ0FDWCxDQUFDLEdBQ0RILG1CQUFPQSxDQUFDLDRFQUNSQSxtQkFBT0EsQ0FBQywyRUFBcUJJLFFBQVFDLElBQUk7QUFHL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdHJlYW1pbmctY2luZXZlcnNlLWFwcC8uL25vZGVfbW9kdWxlcy9kb3RlbnYvY29uZmlnLmpzPzgwMzIiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgcmVxdWlyZSgnLi9saWIvbWFpbicpLmNvbmZpZyhcbiAgICBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICByZXF1aXJlKCcuL2xpYi9lbnYtb3B0aW9ucycpLFxuICAgICAgcmVxdWlyZSgnLi9saWIvY2xpLW9wdGlvbnMnKShwcm9jZXNzLmFyZ3YpXG4gICAgKVxuICApXG59KSgpXG4iXSwibmFtZXMiOlsicmVxdWlyZSIsImNvbmZpZyIsIk9iamVjdCIsImFzc2lnbiIsInByb2Nlc3MiLCJhcmd2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dotenv/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dotenv/lib/cli-options.js":
/*!************************************************!*\
  !*** ./node_modules/dotenv/lib/cli-options.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/;\nmodule.exports = function optionMatcher(args) {\n    return args.reduce(function(acc, cur) {\n        const matches = cur.match(re);\n        if (matches) {\n            acc[matches[1]] = matches[2];\n        }\n        return acc;\n    }, {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9jbGktb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsS0FBSztBQUVYQyxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsY0FBZUMsSUFBSTtJQUMzQyxPQUFPQSxLQUFLQyxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxHQUFHO1FBQ25DLE1BQU1DLFVBQVVELElBQUlFLEtBQUssQ0FBQ1Q7UUFDMUIsSUFBSVEsU0FBUztZQUNYRixHQUFHLENBQUNFLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBR0EsT0FBTyxDQUFDLEVBQUU7UUFDOUI7UUFDQSxPQUFPRjtJQUNULEdBQUcsQ0FBQztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RyZWFtaW5nLWNpbmV2ZXJzZS1hcHAvLi9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9jbGktb3B0aW9ucy5qcz82ZGI2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlID0gL15kb3RlbnZfY29uZmlnXyhlbmNvZGluZ3xwYXRofGRlYnVnfG92ZXJyaWRlfERPVEVOVl9LRVkpPSguKykkL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG9wdGlvbk1hdGNoZXIgKGFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cikge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBjdXIubWF0Y2gocmUpXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIGFjY1ttYXRjaGVzWzFdXSA9IG1hdGNoZXNbMl1cbiAgICB9XG4gICAgcmV0dXJuIGFjY1xuICB9LCB7fSlcbn1cbiJdLCJuYW1lcyI6WyJyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25NYXRjaGVyIiwiYXJncyIsInJlZHVjZSIsImFjYyIsImN1ciIsIm1hdGNoZXMiLCJtYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dotenv/lib/cli-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dotenv/lib/env-options.js":
/*!************************************************!*\
  !*** ./node_modules/dotenv/lib/env-options.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("// ../config.js accepts options via environment variables\n\nconst options = {};\nif (process.env.DOTENV_CONFIG_ENCODING != null) {\n    options.encoding = process.env.DOTENV_CONFIG_ENCODING;\n}\nif (process.env.DOTENV_CONFIG_PATH != null) {\n    options.path = process.env.DOTENV_CONFIG_PATH;\n}\nif (process.env.DOTENV_CONFIG_DEBUG != null) {\n    options.debug = process.env.DOTENV_CONFIG_DEBUG;\n}\nif (process.env.DOTENV_CONFIG_OVERRIDE != null) {\n    options.override = process.env.DOTENV_CONFIG_OVERRIDE;\n}\nif (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {\n    options.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY;\n}\nmodule.exports = options;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG90ZW52L2xpYi9lbnYtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5REFBeUQ7O0FBQ3pELE1BQU1BLFVBQVUsQ0FBQztBQUVqQixJQUFJQyxRQUFRQyxHQUFHLENBQUNDLHNCQUFzQixJQUFJLE1BQU07SUFDOUNILFFBQVFJLFFBQVEsR0FBR0gsUUFBUUMsR0FBRyxDQUFDQyxzQkFBc0I7QUFDdkQ7QUFFQSxJQUFJRixRQUFRQyxHQUFHLENBQUNHLGtCQUFrQixJQUFJLE1BQU07SUFDMUNMLFFBQVFNLElBQUksR0FBR0wsUUFBUUMsR0FBRyxDQUFDRyxrQkFBa0I7QUFDL0M7QUFFQSxJQUFJSixRQUFRQyxHQUFHLENBQUNLLG1CQUFtQixJQUFJLE1BQU07SUFDM0NQLFFBQVFRLEtBQUssR0FBR1AsUUFBUUMsR0FBRyxDQUFDSyxtQkFBbUI7QUFDakQ7QUFFQSxJQUFJTixRQUFRQyxHQUFHLENBQUNPLHNCQUFzQixJQUFJLE1BQU07SUFDOUNULFFBQVFVLFFBQVEsR0FBR1QsUUFBUUMsR0FBRyxDQUFDTyxzQkFBc0I7QUFDdkQ7QUFFQSxJQUFJUixRQUFRQyxHQUFHLENBQUNTLHdCQUF3QixJQUFJLE1BQU07SUFDaERYLFFBQVFZLFVBQVUsR0FBR1gsUUFBUUMsR0FBRyxDQUFDUyx3QkFBd0I7QUFDM0Q7QUFFQUUsT0FBT0MsT0FBTyxHQUFHZCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0cmVhbWluZy1jaW5ldmVyc2UtYXBwLy4vbm9kZV9tb2R1bGVzL2RvdGVudi9saWIvZW52LW9wdGlvbnMuanM/ZjhlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAuLi9jb25maWcuanMgYWNjZXB0cyBvcHRpb25zIHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmNvbnN0IG9wdGlvbnMgPSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19FTkNPRElORyAhPSBudWxsKSB7XG4gIG9wdGlvbnMuZW5jb2RpbmcgPSBwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX0VOQ09ESU5HXG59XG5cbmlmIChwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX1BBVEggIT0gbnVsbCkge1xuICBvcHRpb25zLnBhdGggPSBwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX1BBVEhcbn1cblxuaWYgKHByb2Nlc3MuZW52LkRPVEVOVl9DT05GSUdfREVCVUcgIT0gbnVsbCkge1xuICBvcHRpb25zLmRlYnVnID0gcHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19ERUJVR1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuRE9URU5WX0NPTkZJR19PVkVSUklERSAhPSBudWxsKSB7XG4gIG9wdGlvbnMub3ZlcnJpZGUgPSBwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX09WRVJSSURFXG59XG5cbmlmIChwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX0RPVEVOVl9LRVkgIT0gbnVsbCkge1xuICBvcHRpb25zLkRPVEVOVl9LRVkgPSBwcm9jZXNzLmVudi5ET1RFTlZfQ09ORklHX0RPVEVOVl9LRVlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zXG4iXSwibmFtZXMiOlsib3B0aW9ucyIsInByb2Nlc3MiLCJlbnYiLCJET1RFTlZfQ09ORklHX0VOQ09ESU5HIiwiZW5jb2RpbmciLCJET1RFTlZfQ09ORklHX1BBVEgiLCJwYXRoIiwiRE9URU5WX0NPTkZJR19ERUJVRyIsImRlYnVnIiwiRE9URU5WX0NPTkZJR19PVkVSUklERSIsIm92ZXJyaWRlIiwiRE9URU5WX0NPTkZJR19ET1RFTlZfS0VZIiwiRE9URU5WX0tFWSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dotenv/lib/env-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dotenv/lib/main.js":
/*!*****************************************!*\
  !*** ./node_modules/dotenv/lib/main.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst packageJson = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/dotenv/package.json\");\nconst version = packageJson.version;\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n// Parse src into an Object\nfunction parse(src) {\n    const obj = {};\n    // Convert buffer to string\n    let lines = src.toString();\n    // Convert line breaks to same format\n    lines = lines.replace(/\\r\\n?/mg, \"\\n\");\n    let match;\n    while((match = LINE.exec(lines)) != null){\n        const key = match[1];\n        // Default undefined or null to empty string\n        let value = match[2] || \"\";\n        // Remove whitespace\n        value = value.trim();\n        // Check if double quoted\n        const maybeQuote = value[0];\n        // Remove surrounding quotes\n        value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\");\n        // Expand newlines if double quoted\n        if (maybeQuote === '\"') {\n            value = value.replace(/\\\\n/g, \"\\n\");\n            value = value.replace(/\\\\r/g, \"\\r\");\n        }\n        // Add to object\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _parseVault(options) {\n    const vaultPath = _vaultPath(options);\n    // Parse .env.vault\n    const result = DotenvModule.configDotenv({\n        path: vaultPath\n    });\n    if (!result.parsed) {\n        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);\n        err.code = \"MISSING_DATA\";\n        throw err;\n    }\n    // handle scenario for comma separated keys - for use with key rotation\n    // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n    const keys = _dotenvKey(options).split(\",\");\n    const length = keys.length;\n    let decrypted;\n    for(let i = 0; i < length; i++){\n        try {\n            // Get full key\n            const key = keys[i].trim();\n            // Get instructions for decrypt\n            const attrs = _instructions(result, key);\n            // Decrypt\n            decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n            break;\n        } catch (error) {\n            // last key\n            if (i + 1 >= length) {\n                throw error;\n            }\n        // try next key\n        }\n    }\n    // Parse decrypted .env string\n    return DotenvModule.parse(decrypted);\n}\nfunction _log(message) {\n    console.log(`[dotenv@${version}][INFO] ${message}`);\n}\nfunction _warn(message) {\n    console.log(`[dotenv@${version}][WARN] ${message}`);\n}\nfunction _debug(message) {\n    console.log(`[dotenv@${version}][DEBUG] ${message}`);\n}\nfunction _dotenvKey(options) {\n    // prioritize developer directly setting options.DOTENV_KEY\n    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n        return options.DOTENV_KEY;\n    }\n    // secondary infra already contains a DOTENV_KEY environment variable\n    if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n        return process.env.DOTENV_KEY;\n    }\n    // fallback to empty string\n    return \"\";\n}\nfunction _instructions(result, dotenvKey) {\n    // Parse DOTENV_KEY. Format is a URI\n    let uri;\n    try {\n        uri = new URL(dotenvKey);\n    } catch (error) {\n        if (error.code === \"ERR_INVALID_URL\") {\n            const err = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        }\n        throw error;\n    }\n    // Get decrypt key\n    const key = uri.password;\n    if (!key) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get environment\n    const environment = uri.searchParams.get(\"environment\");\n    if (!environment) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get ciphertext payload\n    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;\n    const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n    ;\n    if (!ciphertext) {\n        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);\n        err.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\";\n        throw err;\n    }\n    return {\n        ciphertext,\n        key\n    };\n}\nfunction _vaultPath(options) {\n    let possibleVaultPath = null;\n    if (options && options.path && options.path.length > 0) {\n        if (Array.isArray(options.path)) {\n            for (const filepath of options.path){\n                if (fs.existsSync(filepath)) {\n                    possibleVaultPath = filepath.endsWith(\".vault\") ? filepath : `${filepath}.vault`;\n                }\n            }\n        } else {\n            possibleVaultPath = options.path.endsWith(\".vault\") ? options.path : `${options.path}.vault`;\n        }\n    } else {\n        possibleVaultPath = path.resolve(process.cwd(), \".env.vault\");\n    }\n    if (fs.existsSync(possibleVaultPath)) {\n        return possibleVaultPath;\n    }\n    return null;\n}\nfunction _resolveHome(envPath) {\n    return envPath[0] === \"~\" ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\nfunction _configVault(options) {\n    _log(\"Loading env from encrypted .env.vault\");\n    const parsed = DotenvModule._parseVault(options);\n    let processEnv = process.env;\n    if (options && options.processEnv != null) {\n        processEnv = options.processEnv;\n    }\n    DotenvModule.populate(processEnv, parsed, options);\n    return {\n        parsed\n    };\n}\nfunction configDotenv(options) {\n    let dotenvPath = path.resolve(process.cwd(), \".env\");\n    let encoding = \"utf8\";\n    const debug = Boolean(options && options.debug);\n    if (options) {\n        if (options.path != null) {\n            let envPath = options.path;\n            if (Array.isArray(envPath)) {\n                for (const filepath of options.path){\n                    if (fs.existsSync(filepath)) {\n                        envPath = filepath;\n                        break;\n                    }\n                }\n            }\n            dotenvPath = _resolveHome(envPath);\n        }\n        if (options.encoding != null) {\n            encoding = options.encoding;\n        } else {\n            if (debug) {\n                _debug(\"No encoding is specified. UTF-8 is used by default\");\n            }\n        }\n    }\n    try {\n        // Specifying an encoding returns a string instead of a buffer\n        const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, {\n            encoding\n        }));\n        let processEnv = process.env;\n        if (options && options.processEnv != null) {\n            processEnv = options.processEnv;\n        }\n        DotenvModule.populate(processEnv, parsed, options);\n        return {\n            parsed\n        };\n    } catch (e) {\n        if (debug) {\n            _debug(`Failed to load ${dotenvPath} ${e.message}`);\n        }\n        return {\n            error: e\n        };\n    }\n}\n// Populates process.env from .env file\nfunction config(options) {\n    // fallback to original dotenv if DOTENV_KEY is not set\n    if (_dotenvKey(options).length === 0) {\n        return DotenvModule.configDotenv(options);\n    }\n    const vaultPath = _vaultPath(options);\n    // dotenvKey exists but .env.vault file does not exist\n    if (!vaultPath) {\n        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n        return DotenvModule.configDotenv(options);\n    }\n    return DotenvModule._configVault(options);\n}\nfunction decrypt(encrypted, keyStr) {\n    const key = Buffer.from(keyStr.slice(-64), \"hex\");\n    let ciphertext = Buffer.from(encrypted, \"base64\");\n    const nonce = ciphertext.subarray(0, 12);\n    const authTag = ciphertext.subarray(-16);\n    ciphertext = ciphertext.subarray(12, -16);\n    try {\n        const aesgcm = crypto.createDecipheriv(\"aes-256-gcm\", key, nonce);\n        aesgcm.setAuthTag(authTag);\n        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;\n    } catch (error) {\n        const isRange = error instanceof RangeError;\n        const invalidKeyLength = error.message === \"Invalid key length\";\n        const decryptionFailed = error.message === \"Unsupported state or unable to authenticate data\";\n        if (isRange || invalidKeyLength) {\n            const err = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        } else if (decryptionFailed) {\n            const err = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n            err.code = \"DECRYPTION_FAILED\";\n            throw err;\n        } else {\n            throw error;\n        }\n    }\n}\n// Populate process.env with parsed values\nfunction populate(processEnv, parsed, options = {}) {\n    const debug = Boolean(options && options.debug);\n    const override = Boolean(options && options.override);\n    if (typeof parsed !== \"object\") {\n        const err = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n        err.code = \"OBJECT_REQUIRED\";\n        throw err;\n    }\n    // Set process.env\n    for (const key of Object.keys(parsed)){\n        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n            if (override === true) {\n                processEnv[key] = parsed[key];\n            }\n            if (debug) {\n                if (override === true) {\n                    _debug(`\"${key}\" is already defined and WAS overwritten`);\n                } else {\n                    _debug(`\"${key}\" is already defined and was NOT overwritten`);\n                }\n            }\n        } else {\n            processEnv[key] = parsed[key];\n        }\n    }\n}\nconst DotenvModule = {\n    configDotenv,\n    _configVault,\n    _parseVault,\n    config,\n    decrypt,\n    parse,\n    populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dotenv/lib/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/dotenv/package.json":
/*!******************************************!*\
  !*** ./node_modules/dotenv/package.json ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"dotenv","version":"16.4.2","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ })

};
;